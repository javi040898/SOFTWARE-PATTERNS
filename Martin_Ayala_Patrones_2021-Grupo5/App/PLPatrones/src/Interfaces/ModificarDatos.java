
package Interfaces;

import DAO.DAOException;
import DAO.DirectivaDAO;
import DAO.DueñoDAO;
import DAO.JugadorDAO;
import DAO.MiembroCuerpoTecnicoDAO;
import DAO.SocioDAO;
import SQL.PostgreSQLDirectivaDAO;
import SQL.PostgreSQLDueñoDAO;
import SQL.PostgreSQLJugadorDAO;
import SQL.PostgreSQLMCuerpoTecnicoDAO;
import SQL.PostgreSQLSocioDAO;
import java.sql.SQLException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import Singleton.SingletonBBDD;

/**
 * Clase para que el usuario pueda modificar sus datos
 *
 * @author Javier y Christian
 */
public class ModificarDatos extends javax.swing.JFrame {

    /**
     * Variable para saber qué usuario está visitando esta interfaz Se utiliza
     * para volver hacia atrás
     */
    private final String tabla;
    /**
     * DNI del usuario que esta visitando la interfaz
     */
    private final String DNI;
    /**
     * id del equipo del usuario que esta visitando la interfaz
     */
    private final int id_Equipo;

    /**
     * Constructor
     *
     * @param tabla
     * @param DNI
     * @param id_Equipo
     */
    public ModificarDatos(String tabla, String DNI,int id_Equipo) {

        this.tabla = tabla;
        this.DNI = DNI;
        this.id_Equipo = id_Equipo;
        initComponents();
        if(id_Equipo == 1){
            setIconImage(new ImageIcon(getClass().getResource("/imagen/lakers.jpg")).getImage());
        }
        if(id_Equipo == 2){
            setIconImage(new ImageIcon(getClass().getResource("/imagen/clippers.jpg")).getImage());
        }
        if(id_Equipo == 3){
            setIconImage(new ImageIcon(getClass().getResource("/imagen/nets.jpg")).getImage());
        }
        if(id_Equipo == 4){
            setIconImage(new ImageIcon(getClass().getResource("/imagen/bucks.jpg")).getImage());
        }
        if(id_Equipo == 5){
            setIconImage(new ImageIcon(getClass().getResource("/imagen/celtics.jpg")).getImage());
        }
        if(id_Equipo == 6){
            setIconImage(new ImageIcon(getClass().getResource("/imagen/bulls.jpg")).getImage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        correoText = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        CorreoButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        ContraButton = new javax.swing.JButton();
        contraText = new javax.swing.JPasswordField();
        volverButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel7.setText("Contraseña");

        CorreoButton.setText("Modificar e-mail");
        CorreoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CorreoButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("E-mail");

        ContraButton.setText("Modificar contraseña");
        ContraButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContraButtonActionPerformed(evt);
            }
        });

        volverButton.setText("Volver");
        volverButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7))
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(correoText, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                            .addComponent(contraText))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CorreoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ContraButton, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(volverButton)))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(volverButton)
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(correoText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(CorreoButton))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(ContraButton)
                    .addComponent(contraText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(235, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Boton para modificar el correo electronico del usuario que ha iniciado sesion
     * @param evt 
     */
    private void CorreoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CorreoButtonActionPerformed
        SingletonBBDD singleton;
        if ("Dueño".equals(tabla)) {

            try {
                singleton = SingletonBBDD.getInstancia();
                DueñoDAO dao = new PostgreSQLDueñoDAO(singleton.connect());
                dao.modificarCorreo(correoText.getText(), DNI);
                JOptionPane.showMessageDialog(null, "E-mail modificado correctamente");
            } catch (SQLException | DAOException ex) {
                System.out.println(ex.getMessage());
                JOptionPane.showMessageDialog(null,"Error al modificar");
            }

        }

        if ("Directiva".equals(tabla)) {
            try {
                singleton = SingletonBBDD.getInstancia();
                DirectivaDAO dao = new PostgreSQLDirectivaDAO(singleton.connect());
                dao.modificarCorreo(correoText.getText(), DNI);
                JOptionPane.showMessageDialog(null, "E-mail modificado correctamente");
            } catch (SQLException | DAOException ex) {
                System.out.println(ex.getMessage());
                JOptionPane.showMessageDialog(null,"Error al modificar");
            }

        }

        if ("Jugador".equals(tabla)) {
            try {
                singleton = SingletonBBDD.getInstancia();
                JugadorDAO dao = new PostgreSQLJugadorDAO(singleton.connect());
                dao.modificarCorreo(correoText.getText(), DNI);
                JOptionPane.showMessageDialog(null, "E-mail modificado correctamente");
            } catch (SQLException | DAOException ex) {
                System.out.println(ex.getMessage());
                JOptionPane.showMessageDialog(null,"Error al modificar");
            }

        }

        if ("MiembroCT".equals(tabla)) {
            try {
                singleton = SingletonBBDD.getInstancia();
                MiembroCuerpoTecnicoDAO dao = new PostgreSQLMCuerpoTecnicoDAO(singleton.connect());
                dao.modificarCorreo(correoText.getText(), DNI);
                JOptionPane.showMessageDialog(null, "E-mail modificado correctamente");
            } catch (SQLException | DAOException ex) {
                System.out.println(ex.getMessage());
                JOptionPane.showMessageDialog(null,"Error al modificar");
            }

        }

        if ("Socio".equals(tabla)) {
            try {
                singleton = SingletonBBDD.getInstancia();
                SocioDAO dao = new PostgreSQLSocioDAO(singleton.connect());
                dao.modificarCorreo(correoText.getText(), DNI);
                JOptionPane.showMessageDialog(null, "E-mail modificado correctamente");
            } catch (SQLException | DAOException ex) {
                System.out.println(ex.getMessage());
                JOptionPane.showMessageDialog(null,"Error al modificar");
            }

        }

    }//GEN-LAST:event_CorreoButtonActionPerformed
    /**
     * Boton para modificar la conytraseña del usuario que ha iniciado sesion
     * @param evt 
     */
    private void ContraButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContraButtonActionPerformed

        SingletonBBDD singleton;
        if ("Dueño".equals(tabla)) {

            try {
                singleton = SingletonBBDD.getInstancia();
                DueñoDAO dao = new PostgreSQLDueñoDAO(singleton.connect());
                dao.modificarContraseña(contraText.getText(), DNI);
                JOptionPane.showMessageDialog(null, "Contraseña modificada correctamente");
            } catch (SQLException | DAOException ex) {
                System.out.println(ex.getMessage());
                JOptionPane.showMessageDialog(null,"Error al modificar");
            }
        }
        if ("Directiva".equals(tabla)) {
            try {
                singleton = SingletonBBDD.getInstancia();
                DirectivaDAO dao = new PostgreSQLDirectivaDAO(singleton.connect());
                dao.modificarContraseña(contraText.getText(), DNI);
                JOptionPane.showMessageDialog(null, "Contraseña modificada correctamente");
            } catch (SQLException | DAOException ex) {
                System.out.println(ex.getMessage());
                JOptionPane.showMessageDialog(null,"Error al modificar");
            }

        }

        if ("Jugador".equals(tabla)) {
            System.out.println("entro2222");
            try {
                singleton = SingletonBBDD.getInstancia();
                JugadorDAO dao = new PostgreSQLJugadorDAO(singleton.connect());
                dao.modificarContraseña(contraText.getText(), DNI);
                JOptionPane.showMessageDialog(null, "Contraseña modificada correctamente");
            } catch (SQLException | DAOException ex) {
                System.out.println(ex.getMessage());
                JOptionPane.showMessageDialog(null,"Error al modificar");
            }

        }


        if ("MiembroCT".equals(tabla)) {
            try {
                singleton = SingletonBBDD.getInstancia();
                MiembroCuerpoTecnicoDAO dao = new PostgreSQLMCuerpoTecnicoDAO(singleton.connect());
                dao.modificarContraseña(contraText.getText(), DNI);
                JOptionPane.showMessageDialog(null, "Contraseña modificada correctamente");

            } catch (SQLException | DAOException ex) {
                System.out.println(ex.getMessage());
                JOptionPane.showMessageDialog(null,"Error al modificar");
            }

        }

        if ("Socio".equals(tabla)) {
            try {
                singleton = SingletonBBDD.getInstancia();
                SocioDAO dao = new PostgreSQLSocioDAO(singleton.connect());
                dao.modificarContraseña(contraText.getText(), DNI);
                JOptionPane.showMessageDialog(null, "Contraseña modificada correctamente");
            } catch (SQLException | DAOException ex) {
                System.out.println(ex.getMessage());
                JOptionPane.showMessageDialog(null,"Error al modificar");
            }

        }

    }//GEN-LAST:event_ContraButtonActionPerformed
    /**
     * Boton para volver a la interfaz anterior dependiendo del nombre de la
     * tabla
     *
     * @param evt
     */
    private void volverButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverButtonActionPerformed
        if ("Directiva".equals(tabla)) {
            InterfazDirectiva id = new InterfazDirectiva(Integer.toString(id_Equipo), DNI);
            this.setVisible(false);
            id.setVisible(true);
        }
        if ("Dueño".equals(tabla)) {
            InterfazDueño id = new InterfazDueño(Integer.toString(id_Equipo), DNI);
            this.setVisible(false);
            id.setVisible(true);
        }

        if ("Jugador".equals(tabla)) {
            InterfazJugador id = new InterfazJugador(DNI,id_Equipo);
            this.setVisible(false);
            id.setVisible(true);
        }
        if ("MiembroCT".equals(tabla)) {
            InterfazMiembroCT id = new InterfazMiembroCT(DNI,id_Equipo);
            this.setVisible(false);
            id.setVisible(true);
        }
        if ("Socio".equals(tabla)) {
            InterfazSocio id = new InterfazSocio(DNI,id_Equipo);
            this.setVisible(false);
            id.setVisible(true);
        }
    }//GEN-LAST:event_volverButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModificarDatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ModificarDatos("", "",0).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ContraButton;
    private javax.swing.JButton CorreoButton;
    private javax.swing.JPasswordField contraText;
    private javax.swing.JTextField correoText;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JButton volverButton;
    // End of variables declaration//GEN-END:variables
}
